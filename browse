#!/usr/bin/env node
'use strict';

require('dotenv').config();
const USER_AGENT = process.env.USER_AGENT;
const CLIENT_ID = process.env.CLIENT_ID;
const CLIENT_SECRET = process.env.CLIENT_SECRET;
const USERNAME = process.env.REDDIT_USERNAME;
const PASSWORD = process.env.REDDIT_PASSWORD;

const config = {
    userAgent: USER_AGENT,
    clientId: CLIENT_ID,
    clientSecret: CLIENT_SECRET,
    username: USERNAME,
    password: PASSWORD
};

const snoowrap = require('snoowrap');
//const config = require('./config.json');
const program = require('commander');
const inquirer = require('inquirer');
const draw = require('terminal-img');
const chalk = require('chalk');
const got = require('got');
const print = console.log;

program
	.version(require('./package.json').version)
	.option('--subreddit <sub>', 'REQUIRED - subreddit to browse')
	.option('--sort [s]', 'OPTIONAL - sort by hot, new, controversial, or rising posts. Default: top posts')
	.description('Enter the subreddit name followed by a sort option (optional)')
	.parse(process.argv);

if (!program.subreddit || program.rawArgs.length > 6) {
	console.log(program.help());
}

async function sanitize() {
	const sanitizedSubreddit = program.subreddit.toLowerCase().replace(/\s/g, '');
	let sanitizedSort = program.sort ? program.sort.toLowerCase().replace(/\s/g, '') : '';

	const availableSortOptions = ['hot', 'new', 'controversial', 'rising'];

	if (!availableSortOptions.includes(sanitizedSort)) {
		sanitizedSort = 'default';
	}
	if (!sanitizedSubreddit || typeof (sanitizedSubreddit) !== 'string') {
		return console.error('invalid subreddit');
	}
	return {
		sanitizedSubreddit,
		sanitizedSort
	};
}

async function promptMenu(data) {
	const { posts, subReddit, sortOption: sort } = data;
	const choices = [
		{
			type: 'list',
			name: 'post',
			message: `/r/${subReddit} postings (sort: ${sort})`,
			choices: posts.map(post => post.title),
			pageSize: 12
		}
	];

	const postChoice = await inquirer.prompt(choices);
	console.log(postChoice);
	const postDetails = posts.filter(obj => {
		return obj.title === postChoice.post;
	});
	return {
		postDetails,
		posts,
		subReddit,
		sort
	};
}

async function getThumbnail(thumbnail) {
	const image = (async () => {
		const { body } = await got(`${thumbnail}`, { encoding: null });
		return await draw.asString(body, { width: 30, height: 30 });
	})();
	return image;
}

async function display(postObject, posts, subReddit, sort) {
	const [{ selftext, author: { name }, thumbnail, score, permalink, url }] = postObject;
	let thumbnailImg = (thumbnail && thumbnail !== 'self' && thumbnail !== 'default') ? await getThumbnail(thumbnail) : '';
	let postContent = selftext ? selftext.trim().replace(/&#x200B;/g, '') : ''; // handle value of &#x200B along the selfText property
	let postLink = permalink ? `https://reddit.com${permalink}` : `https://reddit.com/`;
	let relatedPostUrl = url.trim();

	print(
		`${thumbnailImg}` +
		`${chalk.black.bgWhite(postContent)}\n\n` +
		`${chalk.white.bgBlack('link to the thread:')} ${postLink}\n` +
		`${chalk.white.bgBlack('author:')} ${chalk.italic(name)}\n` +
		`${chalk.white.bgBlack('score:')} ${score > 0 ? chalk.green(score) : chalk.red(score)}\n` +
		`${chalk.white.bgBlack('media url:')} ${relatedPostUrl}`
	);

	return {
		printed: true
	};
}

async function userAction(listOfPosts) {

	const { posts, subReddit, sort: sortOption } = listOfPosts;
	const availableChoices = ['1', '2'];
	const question = [
		{
			type: 'input',
			name: 'post',
			message: `[1] Read the entire story, [2] Back:`,
			validate: (selectedChoice) => {
				if (!availableChoices.includes(selectedChoice)) {
					return 'Try again!';
				}
				return true;
			}
		}
	];

	const { post: userSelectedChoice } = await inquirer.prompt(question);
	await promptMenu({ posts, subReddit, sortOption });
}

async function handleUserSelection(userSelectedChoice) {
// TODOD: handling of all user selections

}

async function retrieve({ reddit, browseObj }) {

	const { sanitizedSubreddit: subReddit, sanitizedSort: sortOption } = browseObj;
	const sortObj = {
		hot: "getHot",
		new: "getNew",
		controversial: "getControversial",
		rising: "getRising",
		default: "getTop"
	};

	let postsObj = await reddit.getSubreddit(`${subReddit}`)[sortObj[sortOption]]();

	const postDetails = [
		'title', 'id', 'downs', 'ups', 'thumbnail_height',
		'thumbnail_width', 'score', 'thumbnail', 'media_only', 'author',
		'num_comments', 'permalink', 'url', 'is_video', 'comments', 'selftext'
	];

	const posts = Array.from(postsObj.map(post => Object.keys(post).reduce((obj, key) => {
		if (postDetails.indexOf(key) > -1) {
			obj[key] = post[key];
		}
		return obj;
	}, {})));

	return {
		posts,
		subReddit,
		sortOption
	};
}

const main = async () => {
	/* 

    Expected workflow:
    
    1. Await for the user input of the subreddit to browse
    2. Read the subreddit and any expected sorting option, if none, default: TOP
    3. Fetch the comments and whitelist the recieved data
			
			sanitize
			retrieve
			prompt
			display
			wait for options
	*/

	try {
        console.log(config);
		const reddit = new snoowrap(config);
		const browseObj = await sanitize();
		const data = await retrieve({ reddit, browseObj });
		const { postDetails, posts, subReddit, sort } = await promptMenu(data);
		const { printed } = await display(postDetails, posts, subReddit, sort);
		if (!printed) {
			throw new Error('something went wrong!');	
		}
		const userChoice = await userAction({ posts, subReddit, sort });
		
	} catch (e) {
		console.error(e);
	}
};

main();
